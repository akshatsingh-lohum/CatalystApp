// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               Int            @id @default(autoincrement())
  companyName      String         @unique
  companyStatus    COMPANY_STATUS
  companyCreatedAt DateTime       @default(now())
  companyUpdatedAt DateTime       @updatedAt
  dealers          Dealer[]
  requests         Request[]
}

model Dealer {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String    @unique
  address   String
  companyID Int
  company   Company   @relation(fields: [companyID], references: [id])
  requests  Request[]
  users     User[]
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  phone         String?   @unique
  password      String
  dealerId      Int
  dealer        Dealer    @relation(fields: [dealerId], references: [id])
  userCreatedAt DateTime  @default(now())
  userUpdatedAt DateTime  @updatedAt
  role          USER_ROLE
}

model Request {
  id              Int        @id @default(autoincrement())
  lotWeightKg     Float
  catalystName    String
  lotID           String     @unique
  catalystPercent Float?
  catalystWeight  Float?
  companyID       Int
  company         Company    @relation(fields: [companyID], references: [id])
  dealerId        Int
  dealer          Dealer     @relation(fields: [dealerId], references: [id])
  status          LOT_STATUS
}

model SecurityCheck {
  id     Int        @id @default(autoincrement())
  videos String
  photos String
  lotID  String     @unique
  status LOT_STATUS
}

model Warehouse {
  id             Int             @id @default(autoincrement())
  lotWeightKg    Float
  videos         String
  photos         String
  clientApproved CLIENT_APPROVAL
  lotID          String          @unique
  status         LOT_STATUS
}

model Incineration {
  id             Int               @id @default(autoincrement())
  videos         String
  photos         String
  custApproved   CUSTOMER_APPROVAL
  clientApproved CLIENT_APPROVAL
  lotID          String            @unique
  status         LOT_STATUS
  catalystWeight Float
}

model Vault {
  id     Int        @id @default(autoincrement())
  videos String
  lotID  String     @unique
  status LOT_STATUS
}

model Production {
  id          Int        @id @default(autoincrement())
  videos      String
  photos      String
  lotID       String     @unique
  status      LOT_STATUS
  lossPercent Float
}

model Dispatch {
  id          Int        @id @default(autoincrement())
  lotWeightKg Float
  videos      String
  photos      String
  lotID       String     @unique
  status      LOT_STATUS
  dispatchNo  String
}

model RequestComplete {
  id     Int        @id @default(autoincrement())
  lotID  String     @unique
  status LOT_STATUS
}

enum CUSTOMER_APPROVAL {
  YES
  NO
  PENDING
}

enum CLIENT_APPROVAL {
  YES
  NO
  PENDING
}

enum STAGE {
  REQUEST
  SECURITY_CHECK
  WAREHOUSE
  INCINERATION
  VAULT
  PRODUCTION
  DISPATCH
  REQUEST_COMPLETE
}

enum COMPANY_STATUS {
  ACTIVE
  INACTIVE
}

enum LOT_STATUS {
  PROCESSING
  COMPLETED
  CANCELLED
  REJECTED
}

enum USER_ROLE {
  SUPER_ADMIN
  COMPANY_ADMIN
  DEALER_ADMIN
  VIEWER
  DATA_UPLOAD // Without View
  USER // Lowest Level of Auth
}
